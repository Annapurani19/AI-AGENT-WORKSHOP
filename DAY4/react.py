# -*- coding: utf-8 -*-
"""reAct.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tq1ULQN-VUzTWIxEJbfmc7Sf4Tn7ImAZ
"""

# 📦 Install dependencies (only once)
!pip install google-generativeai tavily-python --quiet

# 📚 Import modules
import google.generativeai as genai
from tavily import TavilyClient
from IPython.display import Markdown, display

# 🔐 Setup Gemini model
genai.configure(api_key="AIzaSyDx963_uDJXXCAyA1-qy7UODScTdxIxlkg")  # Replace with your Gemini key
model = genai.GenerativeModel("gemini-1.5-flash")

# 🤖 Web Research Agent using Gemini + Tavily
class WebResearchAgent:
    def __init__(self, topic, gemini_model, tavily_key):
        self.topic = topic
        self.model = gemini_model
        self.client = TavilyClient(api_key=tavily_key)
        self.questions = []
        self.answers = []

    def generate_questions(self):
        prompt = f"Generate 5-6 insightful and specific research questions related to: {self.topic}"
        response = self.model.generate_content(prompt)
        raw_lines = response.text.strip().split("\n")
        self.questions = [line.strip("-•123456. ").strip() for line in raw_lines if line.strip()]
        print("🧠 Generated Research Questions:")
        for i, q in enumerate(self.questions, 1):
            print(f"{i}. {q}")

    def search_web(self):
        print("\n🌐 Conducting Web Search...\n")
        for i, question in enumerate(self.questions, 1):
            try:
                results = self.client.search(query=question, search_depth="advanced", max_results=3)
                content = "\n".join([f"- {res['title']}: {res['content']}" for res in results["results"]])
                self.answers.append({"question": question, "content": content})
                print(f"✅ Done: {i}/{len(self.questions)}")
            except Exception as e:
                print(f"❌ Error on: {question}\n{e}")
                self.answers.append({"question": question, "content": "Error fetching results."})

    def compile_report(self):
        report = f"# Web Research Report: {self.topic}\n\n"
        report += f"## Introduction\nThis research explores the topic \"{self.topic}\" using an AI agent that utilizes Gemini for generating questions and Tavily for real-time web searches.\n\n"
        for entry in self.answers:
            report += f"## {entry['question']}\n{entry['content']}\n\n"
        report += "## Conclusion\nThis report summarizes insights gathered from AI-generated reasoning and curated real-time content.\n"
        return report

# 🧪 Set your research topic & API key
topic = "Ethical Challenges of AI Surveillance Technologies"

agent = WebResearchAgent(
    topic=topic,
    gemini_model=model,
    tavily_key="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"  # Replace with your Tavily key
)

# ▶️ Run generation and search
agent.generate_questions()
agent.search_web()
final_report = agent.compile_report()

# 📋 Display structured Markdown report
display(Markdown(final_report))

# 💾 Save as markdown file
with open("web_research_report.md", "w") as f:
    f.write(final_report)

print("📄 Report saved as 'web_research_report.md'")

